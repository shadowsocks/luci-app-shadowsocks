#!/bin/sh /etc/rc.common
#
# Copyright (C) 2014-2021 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

NAME=shadowsocks
EXTRA_COMMANDS="rules"

. /usr/share/libubox/jshn.sh

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

validate_server() {
	[ "$(uci get $NAME.$1 2>/dev/null)" = "servers" ]
}

get_arg_udp() {
	local server=$(uci_get_by_type transparent_proxy udp_relay_server)
	[ "$server" = "same" ] || validate_server $server && echo "-u"
}

get_arg_out() {
	case "$(uci_get_by_type access_control self_proxy 1)" in
		1) echo "-o";;
		2) echo "-O";;
	esac
}

get_arg_tfo() {
	uci_bool_by_name $1 fast_open && echo "--fast-open"
}

get_arg_tnd() {
	uci_bool_by_name $1 no_delay && echo "--no-delay"
}

get_server_ips() {
	echo $(uci_get_by_name $1 server)
}

get_lan_hosts() {
	uci_bool_by_name $1 enable && \
		echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 host)"
}

get_processes() {
	local cores=$(grep 'processor' /proc/cpuinfo | wc -l)
	local processes=$(uci_get_by_type $1 processes $cores)
	if [ "$processes" = "0" ]; then
		echo $cores
	else
		echo $processes
	fi
}

gen_config_file() {
	local config_file=/var/etc/$NAME.$1.json
	if [ "$2" = "1" ]; then
		json_init
		json_add_string "server" "$(uci_get_by_name $1 server)"
		json_add_int "server_port" $(uci_get_by_name $1 server_port)
		json_add_string "method" "$(uci_get_by_name $1 encrypt_method)"
		json_add_string "local_address" "0.0.0.0"
		json_add_int "timeout" $(uci_get_by_name $1 timeout 60)
		local type=$(uci_get_by_name $1 type)
		if [ "$type" = "ssr" ]; then
			json_add_string "password" "$(uci_get_by_name $1 password)"
			json_add_string "protocol" "$(uci_get_by_name $1 protocol)"
			json_add_string "protocol_param" "$(uci_get_by_name $1 protocol_param)"
			json_add_string "obfs" "$(uci_get_by_name $1 obfs)"
			json_add_string "obfs_param" "$(uci_get_by_name $1 obfs_param)"
		else
			local key=$(uci_get_by_name $1 key)
			local password=$(uci_get_by_name $1 password)
			if [ -n "$key" ]; then
				json_add_string "key" "$key"
			elif [ -n "$password" ]; then
				json_add_string "password" "$password"
			fi
			local plugin=$(uci_get_by_name $1 plugin)
			local plugin_opts=$(uci_get_by_name $1 plugin_opts)
			if [ -n "$plugin" ]; then
				echo $plugin >>/var/run/ss-plugin
				json_add_string "plugin" "$plugin"
				if [ -n "$plugin_opts" ]; then
					json_add_string "plugin_opts" "$plugin_opts"
				fi
			fi
			json_add_boolean "reuse_port" 1
		fi
		json_close_object
		json_dump -i >$config_file
	fi
	echo $config_file
}

start_rules() {
	config_load $NAME
	/usr/bin/ss-rules \
		-s "$(config_foreach get_server_ips servers)" \
		-l "$(uci_get_by_type transparent_proxy local_port 1234)" \
		-B "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-W "$(uci_get_by_type access_control wan_fw_list)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		-I "$(uci_get_by_type access_control lan_ifaces)" \
		-d "$(uci_get_by_type access_control lan_target)" \
		-a "$(config_foreach get_lan_hosts lan_hosts)" \
		-e "$(uci_get_by_type access_control ipt_ext)" \
		$(get_arg_out) $(get_arg_udp)
}

rules() {
	pidof ss-redir ssr-redir >/dev/null || return 0
	start_rules || /usr/bin/ss-rules -f
}

start_redir() {
	validate_server $1 || return 0
	local type=$(uci_get_by_name $1 type)
	if [ "$type" = "ssr" ]; then
		command -v ssr-redir >/dev/null || return 1
		ssr-redir -c $(gen_config_file $1 $2) $3 $(get_arg_tfo $1) \
			-l $(uci_get_by_type transparent_proxy local_port 1234) \
			--mtu $(uci_get_by_type transparent_proxy mtu 1492) \
			-f /var/run/ssr-redir$4-$1-$2.pid
	else
		command -v ss-redir >/dev/null || return 1
		ss-redir -c $(gen_config_file $1 $2) $3 $(get_arg_tfo $1) $(get_arg_tnd $1) \
			-l $(uci_get_by_type transparent_proxy local_port 1234) \
			--mtu $(uci_get_by_type transparent_proxy mtu 1492) \
			-f /var/run/ss-redir$4-$1-$2.pid
	fi
}

ss_redir() {
	local processes=$(get_processes transparent_proxy)
	local main_server=$(uci_get_by_type transparent_proxy main_server)
	local udp_relay_server=$(uci_get_by_type transparent_proxy udp_relay_server)
	if [ "$udp_relay_server" = "same" ]; then
		for i in $(seq $processes); do
			start_redir $main_server $i -u
		done
	else
		for i in $(seq $processes); do
			start_redir $main_server $i
		done
		for i in $(seq $processes); do
			start_redir $udp_relay_server $i -U -udp
		done
	fi
}

start_local() {
	validate_server $1 || return 0
	local type=$(uci_get_by_name $1 type)
	if [ "$type" = "ssr" ]; then
		command -v ssr-local >/dev/null 2>&1 || return 0
		ssr-local -c $(gen_config_file $1 $2) -u $(get_arg_tfo $1) \
			-l $(uci_get_by_type socks5_proxy local_port 1080) \
			--mtu $(uci_get_by_type socks5_proxy mtu 1492) \
			-f /var/run/ssr-local-$1-$2.pid
	else
		command -v ss-local >/dev/null 2>&1 || return 0
		ss-local -c $(gen_config_file $1 $2) -u $(get_arg_tfo $1) $(get_arg_tnd $1) \
			-l $(uci_get_by_type socks5_proxy local_port 1080) \
			--mtu $(uci_get_by_type socks5_proxy mtu 1492) \
			-f /var/run/ss-local-$1-$2.pid
	fi
}

ss_local() {
	local processes=$(get_processes socks5_proxy)
	local server=$(uci_get_by_type socks5_proxy server)
	for i in $(seq $processes); do
		start_local $server $i
	done
}

start_tunnel() {
	validate_server $1 || return 0
	local type=$(uci_get_by_name $1 type)
	if [ "$type" = "ssr" ]; then
		command -v ssr-tunnel >/dev/null 2>&1 || return 0
		ssr-tunnel -c $(gen_config_file $1 $2) \
			-l $(uci_get_by_type port_forward local_port 5300) \
			-L $(uci_get_by_type port_forward destination 8.8.4.4:53) \
			--mtu $(uci_get_by_type port_forward mtu 1492) \
			-f /var/run/ssr-tunnel-$1-$2.pid
	else
		command -v ss-tunnel >/dev/null 2>&1 || return 0
		ss-tunnel -c $(gen_config_file $1 $2) -u $(get_arg_tnd $1) \
			-l $(uci_get_by_type port_forward local_port 5300) \
			-L $(uci_get_by_type port_forward destination 8.8.4.4:53) \
			--mtu $(uci_get_by_type port_forward mtu 1492) \
			-f /var/run/ss-tunnel-$1-$2.pid
	fi
}

ss_tunnel() {
	local processes=$(get_processes port_forward)
	local server=$(uci_get_by_type port_forward server)
	for i in $(seq $processes); do
		start_tunnel $server $i
	done
}

start() {
	pidof ss-redir ss-local ss-tunnel ssr-redir ssr-local ssr-tunnel>/dev/null && return 0
	mkdir -p /var/run /var/etc
	ss_redir && rules
	ss_local
	ss_tunnel
}

boot() {
	local delay=$(uci_get_by_type general startup_delay 0)
	(sleep $delay && start >/dev/null 2>&1) &
	return 0
}

kill_all() {
	kill -9 $(pidof $@) >/dev/null 2>&1
}

stop() {
	/usr/bin/ss-rules -f
	kill_all ss-redir ss-local ss-tunnel ssr-redir ssr-local ssr-tunnel
	rm -f /var/run/ss*.pid
	if [ -f /var/run/ss-plugin ]; then
		kill_all $(sort -u /var/run/ss-plugin)
		rm -f /var/run/ss-plugin
	fi
}
