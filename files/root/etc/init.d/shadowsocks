#!/bin/sh /etc/rc.common
#
# Copyright (C) 2014-2022 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15
USE_PROCD=1
NAME=shadowsocks
if type extra_command >/dev/null 2>&1; then
	extra_command "rules" "Reload transparent proxy rules"
else
	EXTRA_COMMANDS="rules"
fi

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

validate_server() {
	[ "$(uci get $NAME.$1 2>/dev/null)" = "servers" ]
}

is_ssr() {
	[ "$(uci_get_by_name $1 type)" = "ssr" ]
}

seq_processes() {
	local cores=$(grep 'processor' /proc/cpuinfo | wc -l)
	local processes=$(uci_get_by_type $1 processes $cores)
	if [ "$processes" = "0" ]; then
		seq $cores
	else
		seq $processes
	fi
}

gen_config_file() {
	json_init
	json_add_string "server" "$(uci_get_by_name $1 server)"
	json_add_int "server_port" $(uci_get_by_name $1 server_port)
	json_add_string "method" "$(uci_get_by_name $1 encrypt_method)"
	json_add_string "local_address" "0.0.0.0"
	json_add_int "timeout" $(uci_get_by_name $1 timeout 60)
	if is_ssr $1; then
		json_add_string "password" "$(uci_get_by_name $1 password)"
		json_add_string "protocol" "$(uci_get_by_name $1 protocol)"
		json_add_string "protocol_param" "$(uci_get_by_name $1 protocol_param)"
		json_add_string "obfs" "$(uci_get_by_name $1 obfs)"
		json_add_string "obfs_param" "$(uci_get_by_name $1 obfs_param)"
	else
		local key=$(uci_get_by_name $1 key)
		local password=$(uci_get_by_name $1 password)
		if [ -n "$key" ]; then
			json_add_string "key" "$key"
		elif [ -n "$password" ]; then
			json_add_string "password" "$password"
		fi
		local plugin=$(uci_get_by_name $1 plugin)
		local plugin_opts=$(uci_get_by_name $1 plugin_opts)
		if [ -n "$plugin" ]; then
			json_add_string "plugin" "$plugin"
			if [ -n "$plugin_opts" ]; then
				json_add_string "plugin_opts" "$plugin_opts"
			fi
		fi
		json_add_boolean "reuse_port" 1
	fi
	json_close_object
	json_dump -i >/var/etc/$NAME.$1.json
}

procd_common_param() {
	procd_set_param nice -5
	procd_set_param limits nofile="65535 65535"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}

procd_append_bool_by_uci_name() {
	uci_bool_by_name $2 $3 && procd_append_param command $1
}

start_rules() {
	get_arg_udp() {
		local server=$(uci_get_by_type transparent_proxy udp_relay_server)
		[ "$server" = "same" ] || validate_server $server && echo "-u"
	}

	get_arg_out() {
		case "$(uci_get_by_type access_control self_proxy 1)" in
			1) echo "-o";;
			2) echo "-O";;
		esac
	}

	get_server_ips() {
		echo $(uci_get_by_name $1 server)
	}

	get_lan_hosts() {
		uci_bool_by_name $1 enable && echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 host)"
	}

	config_load $NAME
	/usr/bin/ss-rules $(get_arg_out) $(get_arg_udp) \
		-s "\"$(echo $(config_foreach get_server_ips servers | sort -u))\"" \
		-l "$(uci_get_by_type transparent_proxy local_port 1234)" \
		-B "$(uci_get_by_type access_control wan_bp_list)" \
		-b "\"$(uci_get_by_type access_control wan_bp_ips)\"" \
		-W "$(uci_get_by_type access_control wan_fw_list)" \
		-w "\"$(uci_get_by_type access_control wan_fw_ips)\"" \
		-I "$(uci_get_by_type access_control lan_ifaces)" \
		-d "$(uci_get_by_type access_control lan_target)" \
		-a "\"$(echo $(config_foreach get_lan_hosts lan_hosts))\"" \
		-e "$(uci_get_by_type access_control ipt_ext)"
}

start_redir() {
	local prog=$(is_ssr $1 && echo ssr-redir || echo ss-redir)
	command -v $prog >/dev/null 2>&1 || return 0
	procd_open_instance ss-redir$4-$2
	procd_set_param command $prog -c /var/etc/$NAME.$1.json $3
	procd_append_param command -l "$(uci_get_by_type transparent_proxy local_port 1234)"
	procd_append_param command --mtu "$(uci_get_by_type transparent_proxy mtu 1492)"
	is_ssr $1 || procd_append_bool_by_uci_name --fast-open $1 fast_open
	is_ssr $1 || procd_append_bool_by_uci_name --no-delay $1 no_delay
	procd_set_param pidfile /var/run/ss-redir$4-$1-$2.pid
	procd_common_param
}

ss_redir() {
	local main_server=$(uci_get_by_type transparent_proxy main_server)
	local udp_relay_server=$(uci_get_by_type transparent_proxy udp_relay_server)
	validate_server $main_server || return 0
	gen_config_file $main_server
	local processes=$(seq_processes transparent_proxy)
	if [ "$udp_relay_server" = "same" ]; then
		for i in $processes; do
			start_redir $main_server $i -u
		done
	else
		for i in $processes; do
			start_redir $main_server $i
		done
		if validate_server $udp_relay_server; then
			gen_config_file $udp_relay_server
			for i in $processes; do
				start_redir $udp_relay_server $i -U -udp
			done
		fi
	fi
	start_rules || /usr/bin/ss-rules -f
}

start_local() {
	local prog=$(is_ssr $1 && echo ssr-local || echo ss-local)
	command -v $prog >/dev/null 2>&1 || return 0
	procd_open_instance ss-local-$2
	procd_set_param command $prog -c /var/etc/$NAME.$1.json -u
	procd_append_param command -l "$(uci_get_by_type socks5_proxy local_port 1080)"
	procd_append_param command --mtu "$(uci_get_by_type socks5_proxy mtu 1492)"
	procd_append_bool_by_uci_name --fast-open $1 fast_open
	is_ssr $1 || procd_append_bool_by_uci_name --no-delay $1 no_delay
	procd_set_param pidfile /var/run/ss-local-$1-$2.pid
	procd_common_param
}

ss_local() {
	local server=$(uci_get_by_type socks5_proxy server)
	validate_server $server || return 0
	gen_config_file $server
	for i in $(seq_processes socks5_proxy); do
		start_local $server $i
	done
}

start_tunnel() {
	local prog=$(is_ssr $1 && echo ssr-tunnel || echo ss-tunnel)
	command -v $prog >/dev/null 2>&1 || return 0
	procd_open_instance ss-tunnel-$2
	procd_set_param command $prog -c /var/etc/$NAME.$1.json -u
	procd_append_param command -l "$(uci_get_by_type port_forward local_port 5300)"
	procd_append_param command -L "$(uci_get_by_type port_forward destination 8.8.4.4:53)"
	procd_append_param command --mtu "$(uci_get_by_type port_forward mtu 1492)"
	procd_append_bool_by_uci_name --fast-open $1 fast_open
	is_ssr $1 || procd_append_bool_by_uci_name --no-delay $1 no_delay
	procd_set_param pidfile /var/run/ss-tunnel-$1-$2.pid
	procd_common_param
}

ss_tunnel() {
	local server=$(uci_get_by_type port_forward server)
	validate_server $server || return 0
	gen_config_file $server
	for i in $(seq_processes port_forward); do
		start_tunnel $server $i
	done
}

service_triggers() {
	procd_add_reload_trigger $NAME
}

start_service() {
	mkdir -p /var/etc
	ss_redir
	ss_local
	ss_tunnel
}

stop_service() {
	/usr/bin/ss-rules -f
}

rules() {
	local running=$(ubus call service list '{"name":"'$NAME'"}' | jsonfilter -l 1 -e "@.$NAME.instances['ss-redir-1'].running")
	[ "$running" = "true" ] || return 0
	start_rules || /usr/bin/ss-rules -f
}

boot() {
	local delay=$(uci_get_by_type general startup_delay 0)
	(sleep $delay && start >/dev/null 2>&1) &
	return 0
}

reload_service() {
	stop
	sleep 1
	start
}
